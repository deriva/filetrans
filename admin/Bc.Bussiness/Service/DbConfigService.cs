//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Bc.Model;
using Bc.Model.Dto;
using Bc.Common.Utilities;
using Bc.Bussiness.IService;
using SqlSugar;
using System.Collections.Generic;
using Bc.Model.View;
using System.Linq;
using System.Data;

namespace Bc.Bussiness.Service
{
    public class DbConfigService : BaseService<DbConfig>, IDbConfigService
    {

        #region CustomInterface 
        /// <summary>   
        /// 查询（分页）
        /// </summary>  
        /// <param name=\"parm\"></param>  
        /// <returns></returns>   \r\n" +
        public PagedInfo<DbConfig> QueryPages(DbConfigDto parm)
        {
            var expr = Expressionable.Create<DbConfig>();

            if (parm.ID.ToInt2() > 0) expr = expr.And(x => x.ID == parm.ID);
            if (!parm.ConfigName.IsEmpty()) expr = expr.And(x => x.ConfigName.Contains(parm.ConfigName));
            if (!parm.UserNo.IsEmpty()) expr = expr.And(x => x.UserNo.Contains(parm.UserNo));
            if (!parm.ConfigInfo.IsEmpty()) expr = expr.And(x => x.ConfigInfo.Contains(parm.ConfigInfo));
            if (!parm.ConfigNo.IsEmpty()) expr = expr.And(x => x.ConfigNo.Contains(parm.ConfigNo));

            var source = Db.Queryable<DbConfig>().Where(expr.ToExpression());
            parm.OrderBy = "Id";
            parm.Sort = "descending";
            return source.ToPage(new PageParm { Page = parm.Page, PageSize = parm.PageSize, OrderBy = parm.OrderBy, Sort = parm.Sort });
        }
        #endregion

        /// <summary>
        /// 获取数据库
        /// </summary>
        /// <param name="configno"></param>
        /// <returns></returns>
        public List<string> GetDatabaseList(string configno)
        {
            var config = Db.Queryable<DbConfig>().Where(x => x.ConfigNo == configno).First();
            List<string> lst = new List<string>();
            var sql = string.Format("select name from sys.databases where database_id > 4;");
            var dt = DBHelper(config.ConfigInfo).Ado.GetDataTable(sql);
            if (dt != null)
            {
                for (var i = 0; i < dt.Rows.Count; i++)
                    lst.Add(dt.Rows[i][0].ToString());
            }
            return lst;
        }
        /// <summary>
        /// 获取表行数
        /// </summary>
        /// <param name="configno"></param>
        /// <param name="database"></param>
        /// <param name="tablename"></param>
        /// <returns></returns>
        public DataTable GetTableRows(string configno, string database = "", string tablename = "")
        {
            var config = Db.Queryable<DbConfig>().Where(x => x.ConfigNo == configno).First();
            var where = "";
            if (!string.IsNullOrWhiteSpace(tablename))
                where += string.Format(" and a.name='{0}'", tablename.Trim());
            var sql = string.Format(@"use [{0}];
 
--获取每张表的行数
SELECT a.name, b.rows
FROM sysobjects AS a INNER JOIN sysindexes AS b ON a.id = b.id
WHERE (a.type = 'u') AND (b.indid IN (0, 1)) {1}
ORDER BY b.rows asc", database, where);
            return DBHelper(config.ConfigInfo).Ado.GetDataTable(sql);
        }

        /// <summary>
        /// 获取表字段
        /// </summary>
        /// <param name="config"></param>
        /// <param name="database"></param>
        /// <param name="table"></param>
        /// <returns></returns>
        public List<TableInfo> GetTableColumn(string configno, string database, string table)
        {
            var config = Db.Queryable<DbConfig>().Where(x => x.ConfigNo == configno).First();
            var where = " 1=1";
            if (!string.IsNullOrWhiteSpace(table))
            {
                where = string.Format(" d.name='{0}'", table);
            }
            var sql = @"use [{0}];

SELECT   
        '{0}' as [Database],
        TableName= d.name,    
        TableNameDesc=case when a.colorder=1 then isnull(f.value,'') else '' end,    
        ColSort=a.colorder,    
        [Column]=a.name,    
        [Identity]=case when COLUMNPROPERTY( a.id,a.name,'IsIdentity')=1 then '1'else '' end,    
        [PrimaryKey]=case when exists(SELECT 1 FROM sysobjects where xtype='PK' and CHARIndex(d.name,name)>=1  and name in (    
            SELECT name FROM sysindexes WHERE indid in(    
                SELECT indid FROM sysindexkeys WHERE id = a.id AND colid=a.colid    
            ))) then '1' else '' end,    
        [Type]=b.name,    
        ByteLen=a.length,    
        [Len]=COLUMNPROPERTY(a.id,a.name,'PRECISION'),    
        [Digtal]=isnull(COLUMNPROPERTY(a.id,a.name,'Scale'),0),    
        AllowNull=case when a.isnullable=1 then '1'else '' end,    
        DefaultValue=isnull(e.text,''),    
        ColumnDesc=isnull(g.[value],'')    
      FROM syscolumns a    
        left join systypes b on a.xtype=b.xusertype    
        inner join sysobjects d on a.id=d.id  and d.xtype='U' and  d.name<>'dtproperties'    
        left join syscomments e on a.cdefault=e.id    
   
  left join sys.extended_properties g on a.id=g.major_id AND a.colid = g.minor_id    
        left join sys.extended_properties f on d.id=f.major_id and f.minor_id=0 
where {1}
     order by a.id,a.colorder";
            var dd = string.Format(sql, database, where);
            var dt = DBHelper(config.ConfigInfo).Ado.GetDataTable(dd);
            if (dt == null) return null;
            var lst = ModelConvertHelper<TableInfo>.ConvertToModel(dt).ToList();

            return lst;
        }

    }
}
